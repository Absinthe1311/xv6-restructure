
user/execchild1:     file format elf64-littleriscv


Disassembly of section .text:

0000000000000000 <main>:
#include "user.h"

int main()
{
   0:	1141                	addi	sp,sp,-16
   2:	e406                	sd	ra,8(sp)
   4:	e022                	sd	s0,0(sp)
   6:	0800                	addi	s0,sp,16
	write(3, 0, 0); // 3 is testcode for block r/w, see sysfile.c sys_write()
   8:	4601                	li	a2,0
   a:	4581                	li	a1,0
   c:	450d                	li	a0,3
   e:	01e000ef          	jal	ra,2c <write>
	while (1)
  12:	a001                	j	12 <main+0x12>

0000000000000014 <fork>:
# generated by usys.pl - do not edit
#include "../kernel/syscall.h"
.global fork
fork:
 li a7, SYS_fork
  14:	4885                	li	a7,1
 ecall
  16:	00000073          	ecall
 ret
  1a:	8082                	ret

000000000000001c <exit>:
.global exit
exit:
 li a7, SYS_exit
  1c:	4889                	li	a7,2
 ecall
  1e:	00000073          	ecall
 ret
  22:	8082                	ret

0000000000000024 <wait>:
.global wait
wait:
 li a7, SYS_wait
  24:	488d                	li	a7,3
 ecall
  26:	00000073          	ecall
 ret
  2a:	8082                	ret

000000000000002c <write>:
.global write
write:
 li a7, SYS_write
  2c:	48c1                	li	a7,16
 ecall
  2e:	00000073          	ecall
 ret
  32:	8082                	ret

0000000000000034 <kill>:
.global kill
kill:
 li a7, SYS_kill
  34:	4899                	li	a7,6
 ecall
  36:	00000073          	ecall
 ret
  3a:	8082                	ret

000000000000003c <exec>:
.global exec
exec:
 li a7, SYS_exec
  3c:	489d                	li	a7,7
 ecall
  3e:	00000073          	ecall
 ret
  42:	8082                	ret

0000000000000044 <getpid>:
.global getpid
getpid:
 li a7, SYS_getpid
  44:	48ad                	li	a7,11
 ecall
  46:	00000073          	ecall
 ret
  4a:	8082                	ret

000000000000004c <sbrk>:
.global sbrk
sbrk:
 li a7, SYS_sbrk
  4c:	48b1                	li	a7,12
 ecall
  4e:	00000073          	ecall
 ret
  52:	8082                	ret

0000000000000054 <sleep>:
.global sleep
sleep:
 li a7, SYS_sleep
  54:	48b5                	li	a7,13
 ecall
  56:	00000073          	ecall
 ret
  5a:	8082                	ret

000000000000005c <uptime>:
.global uptime
uptime:
 li a7, SYS_uptime
  5c:	48b9                	li	a7,14
 ecall
  5e:	00000073          	ecall
 ret
  62:	8082                	ret

0000000000000064 <putc>:
#include "user.h"

static char digits[] = "0123456789ABCDEF";

static void putc(int fd, char c)
{
  64:	1101                	addi	sp,sp,-32
  66:	ec06                	sd	ra,24(sp)
  68:	e822                	sd	s0,16(sp)
  6a:	1000                	addi	s0,sp,32
  6c:	feb407a3          	sb	a1,-17(s0)
	write(fd, &c, 1);
  70:	4605                	li	a2,1
  72:	fef40593          	addi	a1,s0,-17
  76:	fb7ff0ef          	jal	ra,2c <write>
}
  7a:	60e2                	ld	ra,24(sp)
  7c:	6442                	ld	s0,16(sp)
  7e:	6105                	addi	sp,sp,32
  80:	8082                	ret

0000000000000082 <printint>:

static void printint(int fd, int xx, int base, int sgn)
{
  82:	7139                	addi	sp,sp,-64
  84:	fc06                	sd	ra,56(sp)
  86:	f822                	sd	s0,48(sp)
  88:	f426                	sd	s1,40(sp)
  8a:	f04a                	sd	s2,32(sp)
  8c:	ec4e                	sd	s3,24(sp)
  8e:	0080                	addi	s0,sp,64
  90:	84aa                	mv	s1,a0
	char buf[16];
	int i, neg;
	uint x;

	neg = 0;
	if (sgn && xx < 0)
  92:	c299                	beqz	a3,98 <printint+0x16>
  94:	0805c563          	bltz	a1,11e <printint+0x9c>
		neg = 1;
		x = -xx;
	}
	else
	{
		x = xx;
  98:	2581                	sext.w	a1,a1
	neg = 0;
  9a:	4881                	li	a7,0
  9c:	fc040693          	addi	a3,s0,-64
	}

	i = 0;
  a0:	4701                	li	a4,0
	do
	{
		buf[i++] = digits[x % base];
  a2:	2601                	sext.w	a2,a2
  a4:	56000513          	li	a0,1376
  a8:	883a                	mv	a6,a4
  aa:	2705                	addiw	a4,a4,1
  ac:	02c5f7bb          	remuw	a5,a1,a2
  b0:	1782                	slli	a5,a5,0x20
  b2:	9381                	srli	a5,a5,0x20
  b4:	97aa                	add	a5,a5,a0
  b6:	0007c783          	lbu	a5,0(a5)
  ba:	00f68023          	sb	a5,0(a3)
	} while ((x /= base) != 0);
  be:	0005879b          	sext.w	a5,a1
  c2:	02c5d5bb          	divuw	a1,a1,a2
  c6:	0685                	addi	a3,a3,1
  c8:	fec7f0e3          	bgeu	a5,a2,a8 <printint+0x26>
	if (neg)
  cc:	00088c63          	beqz	a7,e4 <printint+0x62>
		buf[i++] = '-';
  d0:	fd070793          	addi	a5,a4,-48
  d4:	00878733          	add	a4,a5,s0
  d8:	02d00793          	li	a5,45
  dc:	fef70823          	sb	a5,-16(a4)
  e0:	0028071b          	addiw	a4,a6,2

	while (--i >= 0)
  e4:	02e05663          	blez	a4,110 <printint+0x8e>
  e8:	fc040793          	addi	a5,s0,-64
  ec:	00e78933          	add	s2,a5,a4
  f0:	fff78993          	addi	s3,a5,-1
  f4:	99ba                	add	s3,s3,a4
  f6:	377d                	addiw	a4,a4,-1
  f8:	1702                	slli	a4,a4,0x20
  fa:	9301                	srli	a4,a4,0x20
  fc:	40e989b3          	sub	s3,s3,a4
		putc(fd, buf[i]);
 100:	fff94583          	lbu	a1,-1(s2)
 104:	8526                	mv	a0,s1
 106:	f5fff0ef          	jal	ra,64 <putc>
	while (--i >= 0)
 10a:	197d                	addi	s2,s2,-1
 10c:	ff391ae3          	bne	s2,s3,100 <printint+0x7e>
}
 110:	70e2                	ld	ra,56(sp)
 112:	7442                	ld	s0,48(sp)
 114:	74a2                	ld	s1,40(sp)
 116:	7902                	ld	s2,32(sp)
 118:	69e2                	ld	s3,24(sp)
 11a:	6121                	addi	sp,sp,64
 11c:	8082                	ret
		x = -xx;
 11e:	40b005bb          	negw	a1,a1
		neg = 1;
 122:	4885                	li	a7,1
		x = -xx;
 124:	bfa5                	j	9c <printint+0x1a>

0000000000000126 <vprintf>:
		putc(fd, digits[x >> (sizeof(uint64) * 8 - 4)]);
}

// Print to the given fd. Only understands %d, %x, %p, %s.
void vprintf(int fd, const char *fmt, va_list ap)
{
 126:	7119                	addi	sp,sp,-128
 128:	fc86                	sd	ra,120(sp)
 12a:	f8a2                	sd	s0,112(sp)
 12c:	f4a6                	sd	s1,104(sp)
 12e:	f0ca                	sd	s2,96(sp)
 130:	ecce                	sd	s3,88(sp)
 132:	e8d2                	sd	s4,80(sp)
 134:	e4d6                	sd	s5,72(sp)
 136:	e0da                	sd	s6,64(sp)
 138:	fc5e                	sd	s7,56(sp)
 13a:	f862                	sd	s8,48(sp)
 13c:	f466                	sd	s9,40(sp)
 13e:	f06a                	sd	s10,32(sp)
 140:	ec6e                	sd	s11,24(sp)
 142:	0100                	addi	s0,sp,128
	char *s;
	int c, i, state;

	state = 0;
	for (i = 0; fmt[i]; i++)
 144:	0005c903          	lbu	s2,0(a1)
 148:	16090363          	beqz	s2,2ae <vprintf+0x188>
 14c:	8aaa                	mv	s5,a0
 14e:	8b32                	mv	s6,a2
 150:	00158493          	addi	s1,a1,1
	state = 0;
 154:	4981                	li	s3,0
			else
			{
				putc(fd, c);
			}
		}
		else if (state == '%')
 156:	02500a13          	li	s4,37
 15a:	4c55                	li	s8,21
 15c:	50800c93          	li	s9,1288
			else if (c == 's')
			{
				s = va_arg(ap, char *);
				if (s == 0)
					s = "(null)";
				while (*s != 0)
 160:	02800d93          	li	s11,40
	putc(fd, 'x');
 164:	4d41                	li	s10,16
		putc(fd, digits[x >> (sizeof(uint64) * 8 - 4)]);
 166:	56000b93          	li	s7,1376
 16a:	a829                	j	184 <vprintf+0x5e>
				putc(fd, c);
 16c:	85ca                	mv	a1,s2
 16e:	8556                	mv	a0,s5
 170:	ef5ff0ef          	jal	ra,64 <putc>
 174:	a019                	j	17a <vprintf+0x54>
		else if (state == '%')
 176:	01498d63          	beq	s3,s4,190 <vprintf+0x6a>
	for (i = 0; fmt[i]; i++)
 17a:	0485                	addi	s1,s1,1
 17c:	fff4c903          	lbu	s2,-1(s1)
 180:	12090763          	beqz	s2,2ae <vprintf+0x188>
		if (state == 0)
 184:	fe0999e3          	bnez	s3,176 <vprintf+0x50>
			if (c == '%')
 188:	ff4912e3          	bne	s2,s4,16c <vprintf+0x46>
				state = '%';
 18c:	89d2                	mv	s3,s4
 18e:	b7f5                	j	17a <vprintf+0x54>
			if (c == 'd')
 190:	0f490c63          	beq	s2,s4,288 <vprintf+0x162>
 194:	f9d9079b          	addiw	a5,s2,-99
 198:	0ff7f793          	zext.b	a5,a5
 19c:	0efc6c63          	bltu	s8,a5,294 <vprintf+0x16e>
 1a0:	f9d9079b          	addiw	a5,s2,-99
 1a4:	0ff7f713          	zext.b	a4,a5
 1a8:	0eec6663          	bltu	s8,a4,294 <vprintf+0x16e>
 1ac:	00271793          	slli	a5,a4,0x2
 1b0:	97e6                	add	a5,a5,s9
 1b2:	439c                	lw	a5,0(a5)
 1b4:	97e6                	add	a5,a5,s9
 1b6:	8782                	jr	a5
				printint(fd, va_arg(ap, int), 10, 1);
 1b8:	008b0913          	addi	s2,s6,8
 1bc:	4685                	li	a3,1
 1be:	4629                	li	a2,10
 1c0:	000b2583          	lw	a1,0(s6)
 1c4:	8556                	mv	a0,s5
 1c6:	ebdff0ef          	jal	ra,82 <printint>
 1ca:	8b4a                	mv	s6,s2
			{
				// Unknown % sequence.  Print it to draw attention.
				putc(fd, '%');
				putc(fd, c);
			}
			state = 0;
 1cc:	4981                	li	s3,0
 1ce:	b775                	j	17a <vprintf+0x54>
				printint(fd, va_arg(ap, uint64), 10, 0);
 1d0:	008b0913          	addi	s2,s6,8
 1d4:	4681                	li	a3,0
 1d6:	4629                	li	a2,10
 1d8:	000b2583          	lw	a1,0(s6)
 1dc:	8556                	mv	a0,s5
 1de:	ea5ff0ef          	jal	ra,82 <printint>
 1e2:	8b4a                	mv	s6,s2
			state = 0;
 1e4:	4981                	li	s3,0
 1e6:	bf51                	j	17a <vprintf+0x54>
				printint(fd, va_arg(ap, int), 16, 0);
 1e8:	008b0913          	addi	s2,s6,8
 1ec:	4681                	li	a3,0
 1ee:	866a                	mv	a2,s10
 1f0:	000b2583          	lw	a1,0(s6)
 1f4:	8556                	mv	a0,s5
 1f6:	e8dff0ef          	jal	ra,82 <printint>
 1fa:	8b4a                	mv	s6,s2
			state = 0;
 1fc:	4981                	li	s3,0
 1fe:	bfb5                	j	17a <vprintf+0x54>
				printptr(fd, va_arg(ap, uint64));
 200:	008b0793          	addi	a5,s6,8
 204:	f8f43423          	sd	a5,-120(s0)
 208:	000b3983          	ld	s3,0(s6)
	putc(fd, '0');
 20c:	03000593          	li	a1,48
 210:	8556                	mv	a0,s5
 212:	e53ff0ef          	jal	ra,64 <putc>
	putc(fd, 'x');
 216:	07800593          	li	a1,120
 21a:	8556                	mv	a0,s5
 21c:	e49ff0ef          	jal	ra,64 <putc>
 220:	896a                	mv	s2,s10
		putc(fd, digits[x >> (sizeof(uint64) * 8 - 4)]);
 222:	03c9d793          	srli	a5,s3,0x3c
 226:	97de                	add	a5,a5,s7
 228:	0007c583          	lbu	a1,0(a5)
 22c:	8556                	mv	a0,s5
 22e:	e37ff0ef          	jal	ra,64 <putc>
	for (i = 0; i < (sizeof(uint64) * 2); i++, x <<= 4)
 232:	0992                	slli	s3,s3,0x4
 234:	397d                	addiw	s2,s2,-1
 236:	fe0916e3          	bnez	s2,222 <vprintf+0xfc>
				printptr(fd, va_arg(ap, uint64));
 23a:	f8843b03          	ld	s6,-120(s0)
			state = 0;
 23e:	4981                	li	s3,0
 240:	bf2d                	j	17a <vprintf+0x54>
				s = va_arg(ap, char *);
 242:	008b0913          	addi	s2,s6,8
 246:	000b3983          	ld	s3,0(s6)
				if (s == 0)
 24a:	00098f63          	beqz	s3,268 <vprintf+0x142>
				while (*s != 0)
 24e:	0009c583          	lbu	a1,0(s3)
 252:	c9b9                	beqz	a1,2a8 <vprintf+0x182>
					putc(fd, *s);
 254:	8556                	mv	a0,s5
 256:	e0fff0ef          	jal	ra,64 <putc>
					s++;
 25a:	0985                	addi	s3,s3,1
				while (*s != 0)
 25c:	0009c583          	lbu	a1,0(s3)
 260:	f9f5                	bnez	a1,254 <vprintf+0x12e>
				s = va_arg(ap, char *);
 262:	8b4a                	mv	s6,s2
			state = 0;
 264:	4981                	li	s3,0
 266:	bf11                	j	17a <vprintf+0x54>
					s = "(null)";
 268:	00000997          	auipc	s3,0x0
 26c:	29898993          	addi	s3,s3,664 # 500 <malloc+0xd4>
				while (*s != 0)
 270:	85ee                	mv	a1,s11
 272:	b7cd                	j	254 <vprintf+0x12e>
				putc(fd, va_arg(ap, uint));
 274:	008b0913          	addi	s2,s6,8
 278:	000b4583          	lbu	a1,0(s6)
 27c:	8556                	mv	a0,s5
 27e:	de7ff0ef          	jal	ra,64 <putc>
 282:	8b4a                	mv	s6,s2
			state = 0;
 284:	4981                	li	s3,0
 286:	bdd5                	j	17a <vprintf+0x54>
				putc(fd, c);
 288:	85d2                	mv	a1,s4
 28a:	8556                	mv	a0,s5
 28c:	dd9ff0ef          	jal	ra,64 <putc>
			state = 0;
 290:	4981                	li	s3,0
 292:	b5e5                	j	17a <vprintf+0x54>
				putc(fd, '%');
 294:	85d2                	mv	a1,s4
 296:	8556                	mv	a0,s5
 298:	dcdff0ef          	jal	ra,64 <putc>
				putc(fd, c);
 29c:	85ca                	mv	a1,s2
 29e:	8556                	mv	a0,s5
 2a0:	dc5ff0ef          	jal	ra,64 <putc>
			state = 0;
 2a4:	4981                	li	s3,0
 2a6:	bdd1                	j	17a <vprintf+0x54>
				s = va_arg(ap, char *);
 2a8:	8b4a                	mv	s6,s2
			state = 0;
 2aa:	4981                	li	s3,0
 2ac:	b5f9                	j	17a <vprintf+0x54>
		}
	}
}
 2ae:	70e6                	ld	ra,120(sp)
 2b0:	7446                	ld	s0,112(sp)
 2b2:	74a6                	ld	s1,104(sp)
 2b4:	7906                	ld	s2,96(sp)
 2b6:	69e6                	ld	s3,88(sp)
 2b8:	6a46                	ld	s4,80(sp)
 2ba:	6aa6                	ld	s5,72(sp)
 2bc:	6b06                	ld	s6,64(sp)
 2be:	7be2                	ld	s7,56(sp)
 2c0:	7c42                	ld	s8,48(sp)
 2c2:	7ca2                	ld	s9,40(sp)
 2c4:	7d02                	ld	s10,32(sp)
 2c6:	6de2                	ld	s11,24(sp)
 2c8:	6109                	addi	sp,sp,128
 2ca:	8082                	ret

00000000000002cc <printf>:

void printf(const char *fmt, ...)
{
 2cc:	711d                	addi	sp,sp,-96
 2ce:	ec06                	sd	ra,24(sp)
 2d0:	e822                	sd	s0,16(sp)
 2d2:	1000                	addi	s0,sp,32
 2d4:	e40c                	sd	a1,8(s0)
 2d6:	e810                	sd	a2,16(s0)
 2d8:	ec14                	sd	a3,24(s0)
 2da:	f018                	sd	a4,32(s0)
 2dc:	f41c                	sd	a5,40(s0)
 2de:	03043823          	sd	a6,48(s0)
 2e2:	03143c23          	sd	a7,56(s0)
	va_list ap;

	va_start(ap, fmt);
 2e6:	00840613          	addi	a2,s0,8
 2ea:	fec43423          	sd	a2,-24(s0)
	vprintf(1, fmt, ap);
 2ee:	85aa                	mv	a1,a0
 2f0:	4505                	li	a0,1
 2f2:	e35ff0ef          	jal	ra,126 <vprintf>
}
 2f6:	60e2                	ld	ra,24(sp)
 2f8:	6442                	ld	s0,16(sp)
 2fa:	6125                	addi	sp,sp,96
 2fc:	8082                	ret

00000000000002fe <free>:
uint64 heaptop = 0;

static Header *add_heaptop(int nu);

void free(void *ap)
{
 2fe:	1101                	addi	sp,sp,-32
 300:	ec06                	sd	ra,24(sp)
 302:	e822                	sd	s0,16(sp)
 304:	e426                	sd	s1,8(sp)
 306:	1000                	addi	s0,sp,32
	Header *bp, *p;

	bp = (Header *)ap - 1;
 308:	ff050493          	addi	s1,a0,-16
	for (p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
 30c:	00001797          	auipc	a5,0x1
 310:	cfc7b783          	ld	a5,-772(a5) # 1008 <freep>
 314:	a83d                	j	352 <free+0x54>
		if (p >= p->s.ptr && (bp > p || bp < p->s.ptr))
			break;
	if (bp + bp->s.size == p->s.ptr)
	{
		bp->s.size += p->s.ptr->s.size;
 316:	4698                	lw	a4,8(a3)
 318:	9f31                	addw	a4,a4,a2
 31a:	fee52c23          	sw	a4,-8(a0)
		bp->s.ptr = p->s.ptr->s.ptr;
 31e:	6398                	ld	a4,0(a5)
 320:	6314                	ld	a3,0(a4)
 322:	a889                	j	374 <free+0x76>
	}
	else
		bp->s.ptr = p->s.ptr;
	if (p + p->s.size == bp)
	{
		p->s.size += bp->s.size;
 324:	ff852703          	lw	a4,-8(a0)
 328:	9f31                	addw	a4,a4,a2
 32a:	c798                	sw	a4,8(a5)
		p->s.ptr = bp->s.ptr;
 32c:	ff053683          	ld	a3,-16(a0)
		bp = p;
 330:	84be                	mv	s1,a5
 332:	a8a1                	j	38a <free+0x8c>
		p->s.ptr = bp;
	freep = p;
	// bp is the last block and larger than 16KB, shrink to 4KB
	if ((uint64)(bp + bp->s.size) >= heaptop && bp->s.size >= 1024)
	{
		add_heaptop(256 - bp->s.size);
 334:	10000513          	li	a0,256
 338:	9d19                	subw	a0,a0,a4
 33a:	084000ef          	jal	ra,3be <add_heaptop>
		bp->s.size = 256;
 33e:	10000793          	li	a5,256
 342:	c49c                	sw	a5,8(s1)
	}
}
 344:	a885                	j	3b4 <free+0xb6>
		if (p >= p->s.ptr && (bp > p || bp < p->s.ptr))
 346:	6398                	ld	a4,0(a5)
 348:	00e7e463          	bltu	a5,a4,350 <free+0x52>
 34c:	00e4ea63          	bltu	s1,a4,360 <free+0x62>
{
 350:	87ba                	mv	a5,a4
	for (p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
 352:	fe97fae3          	bgeu	a5,s1,346 <free+0x48>
 356:	6398                	ld	a4,0(a5)
 358:	00e4e463          	bltu	s1,a4,360 <free+0x62>
		if (p >= p->s.ptr && (bp > p || bp < p->s.ptr))
 35c:	fee7eae3          	bltu	a5,a4,350 <free+0x52>
	if (bp + bp->s.size == p->s.ptr)
 360:	ff852603          	lw	a2,-8(a0)
 364:	6394                	ld	a3,0(a5)
 366:	02061593          	slli	a1,a2,0x20
 36a:	01c5d713          	srli	a4,a1,0x1c
 36e:	9726                	add	a4,a4,s1
 370:	fae683e3          	beq	a3,a4,316 <free+0x18>
		bp->s.ptr = p->s.ptr->s.ptr;
 374:	fed53823          	sd	a3,-16(a0)
	if (p + p->s.size == bp)
 378:	4790                	lw	a2,8(a5)
 37a:	02061693          	slli	a3,a2,0x20
 37e:	01c6d713          	srli	a4,a3,0x1c
 382:	973e                	add	a4,a4,a5
 384:	86a6                	mv	a3,s1
 386:	f8e48fe3          	beq	s1,a4,324 <free+0x26>
		p->s.ptr = bp->s.ptr;
 38a:	e394                	sd	a3,0(a5)
	freep = p;
 38c:	00001717          	auipc	a4,0x1
 390:	c6f73e23          	sd	a5,-900(a4) # 1008 <freep>
	if ((uint64)(bp + bp->s.size) >= heaptop && bp->s.size >= 1024)
 394:	4498                	lw	a4,8(s1)
 396:	02071693          	slli	a3,a4,0x20
 39a:	01c6d793          	srli	a5,a3,0x1c
 39e:	97a6                	add	a5,a5,s1
 3a0:	00001697          	auipc	a3,0x1
 3a4:	c606b683          	ld	a3,-928(a3) # 1000 <heaptop>
 3a8:	00d7e663          	bltu	a5,a3,3b4 <free+0xb6>
 3ac:	3ff00793          	li	a5,1023
 3b0:	f8e7e2e3          	bltu	a5,a4,334 <free+0x36>
}
 3b4:	60e2                	ld	ra,24(sp)
 3b6:	6442                	ld	s0,16(sp)
 3b8:	64a2                	ld	s1,8(sp)
 3ba:	6105                	addi	sp,sp,32
 3bc:	8082                	ret

00000000000003be <add_heaptop>:

static Header *add_heaptop(int nu)
{
 3be:	1101                	addi	sp,sp,-32
 3c0:	ec06                	sd	ra,24(sp)
 3c2:	e822                	sd	s0,16(sp)
 3c4:	e426                	sd	s1,8(sp)
 3c6:	1000                	addi	s0,sp,32
 3c8:	84aa                	mv	s1,a0
	char *p;
	Header *hp;

	if (nu > 0)
 3ca:	02a05f63          	blez	a0,408 <add_heaptop+0x4a>
	{
		p = sbrk(nu * sizeof(Header));
 3ce:	0045151b          	slliw	a0,a0,0x4
 3d2:	c7bff0ef          	jal	ra,4c <sbrk>
 3d6:	87aa                	mv	a5,a0
		if (p == (char *)-1)
 3d8:	577d                	li	a4,-1
			return 0;
 3da:	4501                	li	a0,0
		if (p == (char *)-1)
 3dc:	02e78163          	beq	a5,a4,3fe <add_heaptop+0x40>
		hp = (Header *)p;
		hp->s.size = nu;
 3e0:	c784                	sw	s1,8(a5)
		heaptop = (uint64)hp + nu * sizeof(Header);
 3e2:	0492                	slli	s1,s1,0x4
 3e4:	94be                	add	s1,s1,a5
 3e6:	00001717          	auipc	a4,0x1
 3ea:	c0973d23          	sd	s1,-998(a4) # 1000 <heaptop>
		free((void *)(hp + 1));
 3ee:	01078513          	addi	a0,a5,16
 3f2:	f0dff0ef          	jal	ra,2fe <free>
		return freep;
 3f6:	00001517          	auipc	a0,0x1
 3fa:	c1253503          	ld	a0,-1006(a0) # 1008 <freep>
		if (p == (char *)-1)
			return 0;
		heaptop += nu * sizeof(Header);
		return 0;
	}
}
 3fe:	60e2                	ld	ra,24(sp)
 400:	6442                	ld	s0,16(sp)
 402:	64a2                	ld	s1,8(sp)
 404:	6105                	addi	sp,sp,32
 406:	8082                	ret
		p = sbrk(nu * sizeof(Header));
 408:	0045151b          	slliw	a0,a0,0x4
 40c:	c41ff0ef          	jal	ra,4c <sbrk>
 410:	872a                	mv	a4,a0
		if (p == (char *)-1)
 412:	57fd                	li	a5,-1
			return 0;
 414:	4501                	li	a0,0
		if (p == (char *)-1)
 416:	fef704e3          	beq	a4,a5,3fe <add_heaptop+0x40>
		heaptop += nu * sizeof(Header);
 41a:	00001797          	auipc	a5,0x1
 41e:	be678793          	addi	a5,a5,-1050 # 1000 <heaptop>
 422:	0492                	slli	s1,s1,0x4
 424:	6398                	ld	a4,0(a5)
 426:	94ba                	add	s1,s1,a4
 428:	e384                	sd	s1,0(a5)
		return 0;
 42a:	bfd1                	j	3fe <add_heaptop+0x40>

000000000000042c <malloc>:

void *malloc(uint nbytes)
{
 42c:	715d                	addi	sp,sp,-80
 42e:	e486                	sd	ra,72(sp)
 430:	e0a2                	sd	s0,64(sp)
 432:	fc26                	sd	s1,56(sp)
 434:	f84a                	sd	s2,48(sp)
 436:	f44e                	sd	s3,40(sp)
 438:	f052                	sd	s4,32(sp)
 43a:	ec56                	sd	s5,24(sp)
 43c:	e85a                	sd	s6,16(sp)
 43e:	e45e                	sd	s7,8(sp)
 440:	0880                	addi	s0,sp,80
	Header *p, *prevp;
	uint nunits;

	nunits = (nbytes + sizeof(Header) - 1) / sizeof(Header) + 1;
 442:	02051493          	slli	s1,a0,0x20
 446:	9081                	srli	s1,s1,0x20
 448:	04bd                	addi	s1,s1,15
 44a:	8091                	srli	s1,s1,0x4
 44c:	00148a1b          	addiw	s4,s1,1
 450:	0485                	addi	s1,s1,1
	if ((prevp = freep) == 0)
 452:	00001517          	auipc	a0,0x1
 456:	bb653503          	ld	a0,-1098(a0) # 1008 <freep>
 45a:	c105                	beqz	a0,47a <malloc+0x4e>
	{
		base.s.ptr = freep = prevp = &base;
		base.s.size = 0;
	}
	for (p = prevp->s.ptr;; prevp = p, p = p->s.ptr)
 45c:	611c                	ld	a5,0(a0)
	{
		if (p->s.size >= nunits)
 45e:	4798                	lw	a4,8(a5)
 460:	02977963          	bgeu	a4,s1,492 <malloc+0x66>
				p->s.size = nunits;
			}
			freep = prevp;
			return (void *)(p + 1);
		}
		if (p == freep)
 464:	00001917          	auipc	s2,0x1
 468:	ba490913          	addi	s2,s2,-1116 # 1008 <freep>
			// grow, by 4KB at the minimum
			if ((p = add_heaptop(nunits < 256 ? 256 : nunits)) == 0)
 46c:	8b26                	mv	s6,s1
 46e:	8aa6                	mv	s5,s1
 470:	10000993          	li	s3,256
 474:	10000b93          	li	s7,256
 478:	a0ad                	j	4e2 <malloc+0xb6>
		base.s.ptr = freep = prevp = &base;
 47a:	00001797          	auipc	a5,0x1
 47e:	b9678793          	addi	a5,a5,-1130 # 1010 <base>
 482:	00001717          	auipc	a4,0x1
 486:	b8f73323          	sd	a5,-1146(a4) # 1008 <freep>
 48a:	e39c                	sd	a5,0(a5)
		base.s.size = 0;
 48c:	0007a423          	sw	zero,8(a5)
		if (p->s.size >= nunits)
 490:	bfd1                	j	464 <malloc+0x38>
			if (p->s.size == nunits)
 492:	02e48d63          	beq	s1,a4,4cc <malloc+0xa0>
				p->s.size -= nunits;
 496:	4147073b          	subw	a4,a4,s4
 49a:	c798                	sw	a4,8(a5)
				p += p->s.size;
 49c:	02071693          	slli	a3,a4,0x20
 4a0:	01c6d713          	srli	a4,a3,0x1c
 4a4:	97ba                	add	a5,a5,a4
				p->s.size = nunits;
 4a6:	0147a423          	sw	s4,8(a5)
			freep = prevp;
 4aa:	00001717          	auipc	a4,0x1
 4ae:	b4a73f23          	sd	a0,-1186(a4) # 1008 <freep>
			return (void *)(p + 1);
 4b2:	01078513          	addi	a0,a5,16
				return 0;
	}
}
 4b6:	60a6                	ld	ra,72(sp)
 4b8:	6406                	ld	s0,64(sp)
 4ba:	74e2                	ld	s1,56(sp)
 4bc:	7942                	ld	s2,48(sp)
 4be:	79a2                	ld	s3,40(sp)
 4c0:	7a02                	ld	s4,32(sp)
 4c2:	6ae2                	ld	s5,24(sp)
 4c4:	6b42                	ld	s6,16(sp)
 4c6:	6ba2                	ld	s7,8(sp)
 4c8:	6161                	addi	sp,sp,80
 4ca:	8082                	ret
				prevp->s.ptr = p->s.ptr;
 4cc:	6398                	ld	a4,0(a5)
 4ce:	e118                	sd	a4,0(a0)
 4d0:	bfe9                	j	4aa <malloc+0x7e>
			if ((p = add_heaptop(nunits < 256 ? 256 : nunits)) == 0)
 4d2:	2501                	sext.w	a0,a0
 4d4:	eebff0ef          	jal	ra,3be <add_heaptop>
 4d8:	dd79                	beqz	a0,4b6 <malloc+0x8a>
	for (p = prevp->s.ptr;; prevp = p, p = p->s.ptr)
 4da:	611c                	ld	a5,0(a0)
		if (p->s.size >= nunits)
 4dc:	4798                	lw	a4,8(a5)
 4de:	fa977ae3          	bgeu	a4,s1,492 <malloc+0x66>
		if (p == freep)
 4e2:	00093703          	ld	a4,0(s2)
 4e6:	853e                	mv	a0,a5
 4e8:	fef719e3          	bne	a4,a5,4da <malloc+0xae>
			if ((p = add_heaptop(nunits < 256 ? 256 : nunits)) == 0)
 4ec:	855a                	mv	a0,s6
 4ee:	ff3af2e3          	bgeu	s5,s3,4d2 <malloc+0xa6>
 4f2:	855e                	mv	a0,s7
 4f4:	bff9                	j	4d2 <malloc+0xa6>
