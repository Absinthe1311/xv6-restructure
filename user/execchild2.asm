
user/execchild2:     file format elf64-littleriscv


Disassembly of section .text:

0000000000000000 <main>:
#include "user.h"

int main()
{
   0:	7119                	addi	sp,sp,-128
   2:	fc86                	sd	ra,120(sp)
   4:	f8a2                	sd	s0,112(sp)
   6:	f4a6                	sd	s1,104(sp)
   8:	f0ca                	sd	s2,96(sp)
   a:	ecce                	sd	s3,88(sp)
   c:	0100                	addi	s0,sp,128
	int *p[10];
	for (int i = 0; i < 10; i++)
   e:	f8040913          	addi	s2,s0,-128
{
  12:	3e800493          	li	s1,1000
	for (int i = 0; i < 10; i++)
  16:	698d                	lui	s3,0x3
  18:	af898993          	addi	s3,s3,-1288 # 2af8 <base+0x1ae8>
		p[i] = malloc((i + 1) * 1000);
  1c:	8526                	mv	a0,s1
  1e:	49a000ef          	jal	ra,4b8 <malloc>
  22:	00a93023          	sd	a0,0(s2)
	for (int i = 0; i < 10; i++)
  26:	3e84849b          	addiw	s1,s1,1000
  2a:	0921                	addi	s2,s2,8
  2c:	ff3498e3          	bne	s1,s3,1c <main+0x1c>
	// --------
	free(p[0]);
  30:	f8043503          	ld	a0,-128(s0)
  34:	356000ef          	jal	ra,38a <free>
	free(p[2]);
  38:	f9043503          	ld	a0,-112(s0)
  3c:	34e000ef          	jal	ra,38a <free>
	free(p[4]);
  40:	fa043503          	ld	a0,-96(s0)
  44:	346000ef          	jal	ra,38a <free>
	free(p[6]);
  48:	fb043503          	ld	a0,-80(s0)
  4c:	33e000ef          	jal	ra,38a <free>
	free(p[8]);
  50:	fc043503          	ld	a0,-64(s0)
  54:	336000ef          	jal	ra,38a <free>
	// --------
	free(p[9]);
  58:	fc843503          	ld	a0,-56(s0)
  5c:	32e000ef          	jal	ra,38a <free>
	free(p[7]);
  60:	fb843503          	ld	a0,-72(s0)
  64:	326000ef          	jal	ra,38a <free>
	free(p[5]);
  68:	fa843503          	ld	a0,-88(s0)
  6c:	31e000ef          	jal	ra,38a <free>
	free(p[3]);
  70:	f9843503          	ld	a0,-104(s0)
  74:	316000ef          	jal	ra,38a <free>
	free(p[1]);
  78:	f8843503          	ld	a0,-120(s0)
  7c:	30e000ef          	jal	ra,38a <free>
	printf("[pid: %d] sbrk test over! uptime: %d\n", getpid(), uptime());
  80:	050000ef          	jal	ra,d0 <getpid>
  84:	84aa                	mv	s1,a0
  86:	062000ef          	jal	ra,e8 <uptime>
  8a:	862a                	mv	a2,a0
  8c:	85a6                	mv	a1,s1
  8e:	00000517          	auipc	a0,0x0
  92:	50250513          	addi	a0,a0,1282 # 590 <malloc+0xd8>
  96:	2c2000ef          	jal	ra,358 <printf>
	exit(0);
  9a:	4501                	li	a0,0
  9c:	00c000ef          	jal	ra,a8 <exit>

00000000000000a0 <fork>:
# generated by usys.pl - do not edit
#include "../kernel/syscall.h"
.global fork
fork:
 li a7, SYS_fork
  a0:	4885                	li	a7,1
 ecall
  a2:	00000073          	ecall
 ret
  a6:	8082                	ret

00000000000000a8 <exit>:
.global exit
exit:
 li a7, SYS_exit
  a8:	4889                	li	a7,2
 ecall
  aa:	00000073          	ecall
 ret
  ae:	8082                	ret

00000000000000b0 <wait>:
.global wait
wait:
 li a7, SYS_wait
  b0:	488d                	li	a7,3
 ecall
  b2:	00000073          	ecall
 ret
  b6:	8082                	ret

00000000000000b8 <write>:
.global write
write:
 li a7, SYS_write
  b8:	48c1                	li	a7,16
 ecall
  ba:	00000073          	ecall
 ret
  be:	8082                	ret

00000000000000c0 <kill>:
.global kill
kill:
 li a7, SYS_kill
  c0:	4899                	li	a7,6
 ecall
  c2:	00000073          	ecall
 ret
  c6:	8082                	ret

00000000000000c8 <exec>:
.global exec
exec:
 li a7, SYS_exec
  c8:	489d                	li	a7,7
 ecall
  ca:	00000073          	ecall
 ret
  ce:	8082                	ret

00000000000000d0 <getpid>:
.global getpid
getpid:
 li a7, SYS_getpid
  d0:	48ad                	li	a7,11
 ecall
  d2:	00000073          	ecall
 ret
  d6:	8082                	ret

00000000000000d8 <sbrk>:
.global sbrk
sbrk:
 li a7, SYS_sbrk
  d8:	48b1                	li	a7,12
 ecall
  da:	00000073          	ecall
 ret
  de:	8082                	ret

00000000000000e0 <sleep>:
.global sleep
sleep:
 li a7, SYS_sleep
  e0:	48b5                	li	a7,13
 ecall
  e2:	00000073          	ecall
 ret
  e6:	8082                	ret

00000000000000e8 <uptime>:
.global uptime
uptime:
 li a7, SYS_uptime
  e8:	48b9                	li	a7,14
 ecall
  ea:	00000073          	ecall
 ret
  ee:	8082                	ret

00000000000000f0 <putc>:
#include "user.h"

static char digits[] = "0123456789ABCDEF";

static void putc(int fd, char c)
{
  f0:	1101                	addi	sp,sp,-32
  f2:	ec06                	sd	ra,24(sp)
  f4:	e822                	sd	s0,16(sp)
  f6:	1000                	addi	s0,sp,32
  f8:	feb407a3          	sb	a1,-17(s0)
	write(fd, &c, 1);
  fc:	4605                	li	a2,1
  fe:	fef40593          	addi	a1,s0,-17
 102:	fb7ff0ef          	jal	ra,b8 <write>
}
 106:	60e2                	ld	ra,24(sp)
 108:	6442                	ld	s0,16(sp)
 10a:	6105                	addi	sp,sp,32
 10c:	8082                	ret

000000000000010e <printint>:

static void printint(int fd, int xx, int base, int sgn)
{
 10e:	7139                	addi	sp,sp,-64
 110:	fc06                	sd	ra,56(sp)
 112:	f822                	sd	s0,48(sp)
 114:	f426                	sd	s1,40(sp)
 116:	f04a                	sd	s2,32(sp)
 118:	ec4e                	sd	s3,24(sp)
 11a:	0080                	addi	s0,sp,64
 11c:	84aa                	mv	s1,a0
	char buf[16];
	int i, neg;
	uint x;

	neg = 0;
	if (sgn && xx < 0)
 11e:	c299                	beqz	a3,124 <printint+0x16>
 120:	0805c563          	bltz	a1,1aa <printint+0x9c>
		neg = 1;
		x = -xx;
	}
	else
	{
		x = xx;
 124:	2581                	sext.w	a1,a1
	neg = 0;
 126:	4881                	li	a7,0
 128:	fc040693          	addi	a3,s0,-64
	}

	i = 0;
 12c:	4701                	li	a4,0
	do
	{
		buf[i++] = digits[x % base];
 12e:	2601                	sext.w	a2,a2
 130:	61800513          	li	a0,1560
 134:	883a                	mv	a6,a4
 136:	2705                	addiw	a4,a4,1
 138:	02c5f7bb          	remuw	a5,a1,a2
 13c:	1782                	slli	a5,a5,0x20
 13e:	9381                	srli	a5,a5,0x20
 140:	97aa                	add	a5,a5,a0
 142:	0007c783          	lbu	a5,0(a5)
 146:	00f68023          	sb	a5,0(a3)
	} while ((x /= base) != 0);
 14a:	0005879b          	sext.w	a5,a1
 14e:	02c5d5bb          	divuw	a1,a1,a2
 152:	0685                	addi	a3,a3,1
 154:	fec7f0e3          	bgeu	a5,a2,134 <printint+0x26>
	if (neg)
 158:	00088c63          	beqz	a7,170 <printint+0x62>
		buf[i++] = '-';
 15c:	fd070793          	addi	a5,a4,-48
 160:	00878733          	add	a4,a5,s0
 164:	02d00793          	li	a5,45
 168:	fef70823          	sb	a5,-16(a4)
 16c:	0028071b          	addiw	a4,a6,2

	while (--i >= 0)
 170:	02e05663          	blez	a4,19c <printint+0x8e>
 174:	fc040793          	addi	a5,s0,-64
 178:	00e78933          	add	s2,a5,a4
 17c:	fff78993          	addi	s3,a5,-1
 180:	99ba                	add	s3,s3,a4
 182:	377d                	addiw	a4,a4,-1
 184:	1702                	slli	a4,a4,0x20
 186:	9301                	srli	a4,a4,0x20
 188:	40e989b3          	sub	s3,s3,a4
		putc(fd, buf[i]);
 18c:	fff94583          	lbu	a1,-1(s2)
 190:	8526                	mv	a0,s1
 192:	f5fff0ef          	jal	ra,f0 <putc>
	while (--i >= 0)
 196:	197d                	addi	s2,s2,-1
 198:	ff391ae3          	bne	s2,s3,18c <printint+0x7e>
}
 19c:	70e2                	ld	ra,56(sp)
 19e:	7442                	ld	s0,48(sp)
 1a0:	74a2                	ld	s1,40(sp)
 1a2:	7902                	ld	s2,32(sp)
 1a4:	69e2                	ld	s3,24(sp)
 1a6:	6121                	addi	sp,sp,64
 1a8:	8082                	ret
		x = -xx;
 1aa:	40b005bb          	negw	a1,a1
		neg = 1;
 1ae:	4885                	li	a7,1
		x = -xx;
 1b0:	bfa5                	j	128 <printint+0x1a>

00000000000001b2 <vprintf>:
		putc(fd, digits[x >> (sizeof(uint64) * 8 - 4)]);
}

// Print to the given fd. Only understands %d, %x, %p, %s.
void vprintf(int fd, const char *fmt, va_list ap)
{
 1b2:	7119                	addi	sp,sp,-128
 1b4:	fc86                	sd	ra,120(sp)
 1b6:	f8a2                	sd	s0,112(sp)
 1b8:	f4a6                	sd	s1,104(sp)
 1ba:	f0ca                	sd	s2,96(sp)
 1bc:	ecce                	sd	s3,88(sp)
 1be:	e8d2                	sd	s4,80(sp)
 1c0:	e4d6                	sd	s5,72(sp)
 1c2:	e0da                	sd	s6,64(sp)
 1c4:	fc5e                	sd	s7,56(sp)
 1c6:	f862                	sd	s8,48(sp)
 1c8:	f466                	sd	s9,40(sp)
 1ca:	f06a                	sd	s10,32(sp)
 1cc:	ec6e                	sd	s11,24(sp)
 1ce:	0100                	addi	s0,sp,128
	char *s;
	int c, i, state;

	state = 0;
	for (i = 0; fmt[i]; i++)
 1d0:	0005c903          	lbu	s2,0(a1)
 1d4:	16090363          	beqz	s2,33a <vprintf+0x188>
 1d8:	8aaa                	mv	s5,a0
 1da:	8b32                	mv	s6,a2
 1dc:	00158493          	addi	s1,a1,1
	state = 0;
 1e0:	4981                	li	s3,0
			else
			{
				putc(fd, c);
			}
		}
		else if (state == '%')
 1e2:	02500a13          	li	s4,37
 1e6:	4c55                	li	s8,21
 1e8:	5c000c93          	li	s9,1472
			else if (c == 's')
			{
				s = va_arg(ap, char *);
				if (s == 0)
					s = "(null)";
				while (*s != 0)
 1ec:	02800d93          	li	s11,40
	putc(fd, 'x');
 1f0:	4d41                	li	s10,16
		putc(fd, digits[x >> (sizeof(uint64) * 8 - 4)]);
 1f2:	61800b93          	li	s7,1560
 1f6:	a829                	j	210 <vprintf+0x5e>
				putc(fd, c);
 1f8:	85ca                	mv	a1,s2
 1fa:	8556                	mv	a0,s5
 1fc:	ef5ff0ef          	jal	ra,f0 <putc>
 200:	a019                	j	206 <vprintf+0x54>
		else if (state == '%')
 202:	01498d63          	beq	s3,s4,21c <vprintf+0x6a>
	for (i = 0; fmt[i]; i++)
 206:	0485                	addi	s1,s1,1
 208:	fff4c903          	lbu	s2,-1(s1)
 20c:	12090763          	beqz	s2,33a <vprintf+0x188>
		if (state == 0)
 210:	fe0999e3          	bnez	s3,202 <vprintf+0x50>
			if (c == '%')
 214:	ff4912e3          	bne	s2,s4,1f8 <vprintf+0x46>
				state = '%';
 218:	89d2                	mv	s3,s4
 21a:	b7f5                	j	206 <vprintf+0x54>
			if (c == 'd')
 21c:	0f490c63          	beq	s2,s4,314 <vprintf+0x162>
 220:	f9d9079b          	addiw	a5,s2,-99
 224:	0ff7f793          	zext.b	a5,a5
 228:	0efc6c63          	bltu	s8,a5,320 <vprintf+0x16e>
 22c:	f9d9079b          	addiw	a5,s2,-99
 230:	0ff7f713          	zext.b	a4,a5
 234:	0eec6663          	bltu	s8,a4,320 <vprintf+0x16e>
 238:	00271793          	slli	a5,a4,0x2
 23c:	97e6                	add	a5,a5,s9
 23e:	439c                	lw	a5,0(a5)
 240:	97e6                	add	a5,a5,s9
 242:	8782                	jr	a5
				printint(fd, va_arg(ap, int), 10, 1);
 244:	008b0913          	addi	s2,s6,8
 248:	4685                	li	a3,1
 24a:	4629                	li	a2,10
 24c:	000b2583          	lw	a1,0(s6)
 250:	8556                	mv	a0,s5
 252:	ebdff0ef          	jal	ra,10e <printint>
 256:	8b4a                	mv	s6,s2
			{
				// Unknown % sequence.  Print it to draw attention.
				putc(fd, '%');
				putc(fd, c);
			}
			state = 0;
 258:	4981                	li	s3,0
 25a:	b775                	j	206 <vprintf+0x54>
				printint(fd, va_arg(ap, uint64), 10, 0);
 25c:	008b0913          	addi	s2,s6,8
 260:	4681                	li	a3,0
 262:	4629                	li	a2,10
 264:	000b2583          	lw	a1,0(s6)
 268:	8556                	mv	a0,s5
 26a:	ea5ff0ef          	jal	ra,10e <printint>
 26e:	8b4a                	mv	s6,s2
			state = 0;
 270:	4981                	li	s3,0
 272:	bf51                	j	206 <vprintf+0x54>
				printint(fd, va_arg(ap, int), 16, 0);
 274:	008b0913          	addi	s2,s6,8
 278:	4681                	li	a3,0
 27a:	866a                	mv	a2,s10
 27c:	000b2583          	lw	a1,0(s6)
 280:	8556                	mv	a0,s5
 282:	e8dff0ef          	jal	ra,10e <printint>
 286:	8b4a                	mv	s6,s2
			state = 0;
 288:	4981                	li	s3,0
 28a:	bfb5                	j	206 <vprintf+0x54>
				printptr(fd, va_arg(ap, uint64));
 28c:	008b0793          	addi	a5,s6,8
 290:	f8f43423          	sd	a5,-120(s0)
 294:	000b3983          	ld	s3,0(s6)
	putc(fd, '0');
 298:	03000593          	li	a1,48
 29c:	8556                	mv	a0,s5
 29e:	e53ff0ef          	jal	ra,f0 <putc>
	putc(fd, 'x');
 2a2:	07800593          	li	a1,120
 2a6:	8556                	mv	a0,s5
 2a8:	e49ff0ef          	jal	ra,f0 <putc>
 2ac:	896a                	mv	s2,s10
		putc(fd, digits[x >> (sizeof(uint64) * 8 - 4)]);
 2ae:	03c9d793          	srli	a5,s3,0x3c
 2b2:	97de                	add	a5,a5,s7
 2b4:	0007c583          	lbu	a1,0(a5)
 2b8:	8556                	mv	a0,s5
 2ba:	e37ff0ef          	jal	ra,f0 <putc>
	for (i = 0; i < (sizeof(uint64) * 2); i++, x <<= 4)
 2be:	0992                	slli	s3,s3,0x4
 2c0:	397d                	addiw	s2,s2,-1
 2c2:	fe0916e3          	bnez	s2,2ae <vprintf+0xfc>
				printptr(fd, va_arg(ap, uint64));
 2c6:	f8843b03          	ld	s6,-120(s0)
			state = 0;
 2ca:	4981                	li	s3,0
 2cc:	bf2d                	j	206 <vprintf+0x54>
				s = va_arg(ap, char *);
 2ce:	008b0913          	addi	s2,s6,8
 2d2:	000b3983          	ld	s3,0(s6)
				if (s == 0)
 2d6:	00098f63          	beqz	s3,2f4 <vprintf+0x142>
				while (*s != 0)
 2da:	0009c583          	lbu	a1,0(s3)
 2de:	c9b9                	beqz	a1,334 <vprintf+0x182>
					putc(fd, *s);
 2e0:	8556                	mv	a0,s5
 2e2:	e0fff0ef          	jal	ra,f0 <putc>
					s++;
 2e6:	0985                	addi	s3,s3,1
				while (*s != 0)
 2e8:	0009c583          	lbu	a1,0(s3)
 2ec:	f9f5                	bnez	a1,2e0 <vprintf+0x12e>
				s = va_arg(ap, char *);
 2ee:	8b4a                	mv	s6,s2
			state = 0;
 2f0:	4981                	li	s3,0
 2f2:	bf11                	j	206 <vprintf+0x54>
					s = "(null)";
 2f4:	00000997          	auipc	s3,0x0
 2f8:	2c498993          	addi	s3,s3,708 # 5b8 <malloc+0x100>
				while (*s != 0)
 2fc:	85ee                	mv	a1,s11
 2fe:	b7cd                	j	2e0 <vprintf+0x12e>
				putc(fd, va_arg(ap, uint));
 300:	008b0913          	addi	s2,s6,8
 304:	000b4583          	lbu	a1,0(s6)
 308:	8556                	mv	a0,s5
 30a:	de7ff0ef          	jal	ra,f0 <putc>
 30e:	8b4a                	mv	s6,s2
			state = 0;
 310:	4981                	li	s3,0
 312:	bdd5                	j	206 <vprintf+0x54>
				putc(fd, c);
 314:	85d2                	mv	a1,s4
 316:	8556                	mv	a0,s5
 318:	dd9ff0ef          	jal	ra,f0 <putc>
			state = 0;
 31c:	4981                	li	s3,0
 31e:	b5e5                	j	206 <vprintf+0x54>
				putc(fd, '%');
 320:	85d2                	mv	a1,s4
 322:	8556                	mv	a0,s5
 324:	dcdff0ef          	jal	ra,f0 <putc>
				putc(fd, c);
 328:	85ca                	mv	a1,s2
 32a:	8556                	mv	a0,s5
 32c:	dc5ff0ef          	jal	ra,f0 <putc>
			state = 0;
 330:	4981                	li	s3,0
 332:	bdd1                	j	206 <vprintf+0x54>
				s = va_arg(ap, char *);
 334:	8b4a                	mv	s6,s2
			state = 0;
 336:	4981                	li	s3,0
 338:	b5f9                	j	206 <vprintf+0x54>
		}
	}
}
 33a:	70e6                	ld	ra,120(sp)
 33c:	7446                	ld	s0,112(sp)
 33e:	74a6                	ld	s1,104(sp)
 340:	7906                	ld	s2,96(sp)
 342:	69e6                	ld	s3,88(sp)
 344:	6a46                	ld	s4,80(sp)
 346:	6aa6                	ld	s5,72(sp)
 348:	6b06                	ld	s6,64(sp)
 34a:	7be2                	ld	s7,56(sp)
 34c:	7c42                	ld	s8,48(sp)
 34e:	7ca2                	ld	s9,40(sp)
 350:	7d02                	ld	s10,32(sp)
 352:	6de2                	ld	s11,24(sp)
 354:	6109                	addi	sp,sp,128
 356:	8082                	ret

0000000000000358 <printf>:

void printf(const char *fmt, ...)
{
 358:	711d                	addi	sp,sp,-96
 35a:	ec06                	sd	ra,24(sp)
 35c:	e822                	sd	s0,16(sp)
 35e:	1000                	addi	s0,sp,32
 360:	e40c                	sd	a1,8(s0)
 362:	e810                	sd	a2,16(s0)
 364:	ec14                	sd	a3,24(s0)
 366:	f018                	sd	a4,32(s0)
 368:	f41c                	sd	a5,40(s0)
 36a:	03043823          	sd	a6,48(s0)
 36e:	03143c23          	sd	a7,56(s0)
	va_list ap;

	va_start(ap, fmt);
 372:	00840613          	addi	a2,s0,8
 376:	fec43423          	sd	a2,-24(s0)
	vprintf(1, fmt, ap);
 37a:	85aa                	mv	a1,a0
 37c:	4505                	li	a0,1
 37e:	e35ff0ef          	jal	ra,1b2 <vprintf>
}
 382:	60e2                	ld	ra,24(sp)
 384:	6442                	ld	s0,16(sp)
 386:	6125                	addi	sp,sp,96
 388:	8082                	ret

000000000000038a <free>:
uint64 heaptop = 0;

static Header *add_heaptop(int nu);

void free(void *ap)
{
 38a:	1101                	addi	sp,sp,-32
 38c:	ec06                	sd	ra,24(sp)
 38e:	e822                	sd	s0,16(sp)
 390:	e426                	sd	s1,8(sp)
 392:	1000                	addi	s0,sp,32
	Header *bp, *p;

	bp = (Header *)ap - 1;
 394:	ff050493          	addi	s1,a0,-16
	for (p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
 398:	00001797          	auipc	a5,0x1
 39c:	c707b783          	ld	a5,-912(a5) # 1008 <freep>
 3a0:	a83d                	j	3de <free+0x54>
		if (p >= p->s.ptr && (bp > p || bp < p->s.ptr))
			break;
	if (bp + bp->s.size == p->s.ptr)
	{
		bp->s.size += p->s.ptr->s.size;
 3a2:	4698                	lw	a4,8(a3)
 3a4:	9f31                	addw	a4,a4,a2
 3a6:	fee52c23          	sw	a4,-8(a0)
		bp->s.ptr = p->s.ptr->s.ptr;
 3aa:	6398                	ld	a4,0(a5)
 3ac:	6314                	ld	a3,0(a4)
 3ae:	a889                	j	400 <free+0x76>
	}
	else
		bp->s.ptr = p->s.ptr;
	if (p + p->s.size == bp)
	{
		p->s.size += bp->s.size;
 3b0:	ff852703          	lw	a4,-8(a0)
 3b4:	9f31                	addw	a4,a4,a2
 3b6:	c798                	sw	a4,8(a5)
		p->s.ptr = bp->s.ptr;
 3b8:	ff053683          	ld	a3,-16(a0)
		bp = p;
 3bc:	84be                	mv	s1,a5
 3be:	a8a1                	j	416 <free+0x8c>
		p->s.ptr = bp;
	freep = p;
	// bp is the last block and larger than 16KB, shrink to 4KB
	if ((uint64)(bp + bp->s.size) >= heaptop && bp->s.size >= 1024)
	{
		add_heaptop(256 - bp->s.size);
 3c0:	10000513          	li	a0,256
 3c4:	9d19                	subw	a0,a0,a4
 3c6:	084000ef          	jal	ra,44a <add_heaptop>
		bp->s.size = 256;
 3ca:	10000793          	li	a5,256
 3ce:	c49c                	sw	a5,8(s1)
	}
}
 3d0:	a885                	j	440 <free+0xb6>
		if (p >= p->s.ptr && (bp > p || bp < p->s.ptr))
 3d2:	6398                	ld	a4,0(a5)
 3d4:	00e7e463          	bltu	a5,a4,3dc <free+0x52>
 3d8:	00e4ea63          	bltu	s1,a4,3ec <free+0x62>
{
 3dc:	87ba                	mv	a5,a4
	for (p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
 3de:	fe97fae3          	bgeu	a5,s1,3d2 <free+0x48>
 3e2:	6398                	ld	a4,0(a5)
 3e4:	00e4e463          	bltu	s1,a4,3ec <free+0x62>
		if (p >= p->s.ptr && (bp > p || bp < p->s.ptr))
 3e8:	fee7eae3          	bltu	a5,a4,3dc <free+0x52>
	if (bp + bp->s.size == p->s.ptr)
 3ec:	ff852603          	lw	a2,-8(a0)
 3f0:	6394                	ld	a3,0(a5)
 3f2:	02061593          	slli	a1,a2,0x20
 3f6:	01c5d713          	srli	a4,a1,0x1c
 3fa:	9726                	add	a4,a4,s1
 3fc:	fae683e3          	beq	a3,a4,3a2 <free+0x18>
		bp->s.ptr = p->s.ptr->s.ptr;
 400:	fed53823          	sd	a3,-16(a0)
	if (p + p->s.size == bp)
 404:	4790                	lw	a2,8(a5)
 406:	02061693          	slli	a3,a2,0x20
 40a:	01c6d713          	srli	a4,a3,0x1c
 40e:	973e                	add	a4,a4,a5
 410:	86a6                	mv	a3,s1
 412:	f8e48fe3          	beq	s1,a4,3b0 <free+0x26>
		p->s.ptr = bp->s.ptr;
 416:	e394                	sd	a3,0(a5)
	freep = p;
 418:	00001717          	auipc	a4,0x1
 41c:	bef73823          	sd	a5,-1040(a4) # 1008 <freep>
	if ((uint64)(bp + bp->s.size) >= heaptop && bp->s.size >= 1024)
 420:	4498                	lw	a4,8(s1)
 422:	02071693          	slli	a3,a4,0x20
 426:	01c6d793          	srli	a5,a3,0x1c
 42a:	97a6                	add	a5,a5,s1
 42c:	00001697          	auipc	a3,0x1
 430:	bd46b683          	ld	a3,-1068(a3) # 1000 <heaptop>
 434:	00d7e663          	bltu	a5,a3,440 <free+0xb6>
 438:	3ff00793          	li	a5,1023
 43c:	f8e7e2e3          	bltu	a5,a4,3c0 <free+0x36>
}
 440:	60e2                	ld	ra,24(sp)
 442:	6442                	ld	s0,16(sp)
 444:	64a2                	ld	s1,8(sp)
 446:	6105                	addi	sp,sp,32
 448:	8082                	ret

000000000000044a <add_heaptop>:

static Header *add_heaptop(int nu)
{
 44a:	1101                	addi	sp,sp,-32
 44c:	ec06                	sd	ra,24(sp)
 44e:	e822                	sd	s0,16(sp)
 450:	e426                	sd	s1,8(sp)
 452:	1000                	addi	s0,sp,32
 454:	84aa                	mv	s1,a0
	char *p;
	Header *hp;

	if (nu > 0)
 456:	02a05f63          	blez	a0,494 <add_heaptop+0x4a>
	{
		p = sbrk(nu * sizeof(Header));
 45a:	0045151b          	slliw	a0,a0,0x4
 45e:	c7bff0ef          	jal	ra,d8 <sbrk>
 462:	87aa                	mv	a5,a0
		if (p == (char *)-1)
 464:	577d                	li	a4,-1
			return 0;
 466:	4501                	li	a0,0
		if (p == (char *)-1)
 468:	02e78163          	beq	a5,a4,48a <add_heaptop+0x40>
		hp = (Header *)p;
		hp->s.size = nu;
 46c:	c784                	sw	s1,8(a5)
		heaptop = (uint64)hp + nu * sizeof(Header);
 46e:	0492                	slli	s1,s1,0x4
 470:	94be                	add	s1,s1,a5
 472:	00001717          	auipc	a4,0x1
 476:	b8973723          	sd	s1,-1138(a4) # 1000 <heaptop>
		free((void *)(hp + 1));
 47a:	01078513          	addi	a0,a5,16
 47e:	f0dff0ef          	jal	ra,38a <free>
		return freep;
 482:	00001517          	auipc	a0,0x1
 486:	b8653503          	ld	a0,-1146(a0) # 1008 <freep>
		if (p == (char *)-1)
			return 0;
		heaptop += nu * sizeof(Header);
		return 0;
	}
}
 48a:	60e2                	ld	ra,24(sp)
 48c:	6442                	ld	s0,16(sp)
 48e:	64a2                	ld	s1,8(sp)
 490:	6105                	addi	sp,sp,32
 492:	8082                	ret
		p = sbrk(nu * sizeof(Header));
 494:	0045151b          	slliw	a0,a0,0x4
 498:	c41ff0ef          	jal	ra,d8 <sbrk>
 49c:	872a                	mv	a4,a0
		if (p == (char *)-1)
 49e:	57fd                	li	a5,-1
			return 0;
 4a0:	4501                	li	a0,0
		if (p == (char *)-1)
 4a2:	fef704e3          	beq	a4,a5,48a <add_heaptop+0x40>
		heaptop += nu * sizeof(Header);
 4a6:	00001797          	auipc	a5,0x1
 4aa:	b5a78793          	addi	a5,a5,-1190 # 1000 <heaptop>
 4ae:	0492                	slli	s1,s1,0x4
 4b0:	6398                	ld	a4,0(a5)
 4b2:	94ba                	add	s1,s1,a4
 4b4:	e384                	sd	s1,0(a5)
		return 0;
 4b6:	bfd1                	j	48a <add_heaptop+0x40>

00000000000004b8 <malloc>:

void *malloc(uint nbytes)
{
 4b8:	715d                	addi	sp,sp,-80
 4ba:	e486                	sd	ra,72(sp)
 4bc:	e0a2                	sd	s0,64(sp)
 4be:	fc26                	sd	s1,56(sp)
 4c0:	f84a                	sd	s2,48(sp)
 4c2:	f44e                	sd	s3,40(sp)
 4c4:	f052                	sd	s4,32(sp)
 4c6:	ec56                	sd	s5,24(sp)
 4c8:	e85a                	sd	s6,16(sp)
 4ca:	e45e                	sd	s7,8(sp)
 4cc:	0880                	addi	s0,sp,80
	Header *p, *prevp;
	uint nunits;

	nunits = (nbytes + sizeof(Header) - 1) / sizeof(Header) + 1;
 4ce:	02051493          	slli	s1,a0,0x20
 4d2:	9081                	srli	s1,s1,0x20
 4d4:	04bd                	addi	s1,s1,15
 4d6:	8091                	srli	s1,s1,0x4
 4d8:	00148a1b          	addiw	s4,s1,1
 4dc:	0485                	addi	s1,s1,1
	if ((prevp = freep) == 0)
 4de:	00001517          	auipc	a0,0x1
 4e2:	b2a53503          	ld	a0,-1238(a0) # 1008 <freep>
 4e6:	c105                	beqz	a0,506 <malloc+0x4e>
	{
		base.s.ptr = freep = prevp = &base;
		base.s.size = 0;
	}
	for (p = prevp->s.ptr;; prevp = p, p = p->s.ptr)
 4e8:	611c                	ld	a5,0(a0)
	{
		if (p->s.size >= nunits)
 4ea:	4798                	lw	a4,8(a5)
 4ec:	02977963          	bgeu	a4,s1,51e <malloc+0x66>
				p->s.size = nunits;
			}
			freep = prevp;
			return (void *)(p + 1);
		}
		if (p == freep)
 4f0:	00001917          	auipc	s2,0x1
 4f4:	b1890913          	addi	s2,s2,-1256 # 1008 <freep>
			// grow, by 4KB at the minimum
			if ((p = add_heaptop(nunits < 256 ? 256 : nunits)) == 0)
 4f8:	8b26                	mv	s6,s1
 4fa:	8aa6                	mv	s5,s1
 4fc:	10000993          	li	s3,256
 500:	10000b93          	li	s7,256
 504:	a0ad                	j	56e <malloc+0xb6>
		base.s.ptr = freep = prevp = &base;
 506:	00001797          	auipc	a5,0x1
 50a:	b0a78793          	addi	a5,a5,-1270 # 1010 <base>
 50e:	00001717          	auipc	a4,0x1
 512:	aef73d23          	sd	a5,-1286(a4) # 1008 <freep>
 516:	e39c                	sd	a5,0(a5)
		base.s.size = 0;
 518:	0007a423          	sw	zero,8(a5)
		if (p->s.size >= nunits)
 51c:	bfd1                	j	4f0 <malloc+0x38>
			if (p->s.size == nunits)
 51e:	02e48d63          	beq	s1,a4,558 <malloc+0xa0>
				p->s.size -= nunits;
 522:	4147073b          	subw	a4,a4,s4
 526:	c798                	sw	a4,8(a5)
				p += p->s.size;
 528:	02071693          	slli	a3,a4,0x20
 52c:	01c6d713          	srli	a4,a3,0x1c
 530:	97ba                	add	a5,a5,a4
				p->s.size = nunits;
 532:	0147a423          	sw	s4,8(a5)
			freep = prevp;
 536:	00001717          	auipc	a4,0x1
 53a:	aca73923          	sd	a0,-1326(a4) # 1008 <freep>
			return (void *)(p + 1);
 53e:	01078513          	addi	a0,a5,16
				return 0;
	}
}
 542:	60a6                	ld	ra,72(sp)
 544:	6406                	ld	s0,64(sp)
 546:	74e2                	ld	s1,56(sp)
 548:	7942                	ld	s2,48(sp)
 54a:	79a2                	ld	s3,40(sp)
 54c:	7a02                	ld	s4,32(sp)
 54e:	6ae2                	ld	s5,24(sp)
 550:	6b42                	ld	s6,16(sp)
 552:	6ba2                	ld	s7,8(sp)
 554:	6161                	addi	sp,sp,80
 556:	8082                	ret
				prevp->s.ptr = p->s.ptr;
 558:	6398                	ld	a4,0(a5)
 55a:	e118                	sd	a4,0(a0)
 55c:	bfe9                	j	536 <malloc+0x7e>
			if ((p = add_heaptop(nunits < 256 ? 256 : nunits)) == 0)
 55e:	2501                	sext.w	a0,a0
 560:	eebff0ef          	jal	ra,44a <add_heaptop>
 564:	dd79                	beqz	a0,542 <malloc+0x8a>
	for (p = prevp->s.ptr;; prevp = p, p = p->s.ptr)
 566:	611c                	ld	a5,0(a0)
		if (p->s.size >= nunits)
 568:	4798                	lw	a4,8(a5)
 56a:	fa977ae3          	bgeu	a4,s1,51e <malloc+0x66>
		if (p == freep)
 56e:	00093703          	ld	a4,0(s2)
 572:	853e                	mv	a0,a5
 574:	fef719e3          	bne	a4,a5,566 <malloc+0xae>
			if ((p = add_heaptop(nunits < 256 ? 256 : nunits)) == 0)
 578:	855a                	mv	a0,s6
 57a:	ff3af2e3          	bgeu	s5,s3,55e <malloc+0xa6>
 57e:	855e                	mv	a0,s7
 580:	bff9                	j	55e <malloc+0xa6>
